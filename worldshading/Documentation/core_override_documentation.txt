
======================================================================
ERPNext Core Modification Documentation - ws overrides
======================================================================

====
1,
====
📁 File Modified:
Path: frappe-bench/apps/erpnext/erpnext/stock/reorder_item.py

🔧 Function Modified:
_reorder_item()

🛠️ Change Summary:
Added a safety check to skip Item Reorder rows with unsupported Material Request types like 'Repack' or 'Production'.

✅ Added:
    if d.material_request_type not in material_requests:
        continue  # skip custom types like Repack or Production


📅 Date of Change:
2025-04-14




====
2,
====
📁 File Modified:
Path: frappe-bench/apps/erpnext/erpnext/stock/stock_balance.py

🔧 Function Modified:
get_indented_qty(item_code, warehouse)

🛠️ Change Summary:
Added 'Repack' and 'Production' to the list of allowed Material Request types
in the SQL query that calculates `inward_qty` for requested_qty calculation.
✅ Added: mr.material_request_type in ('Purchase', 'Manufacture', 'Customer Provided', 'Material Transfer','Repack','Production')

🧠 Reason:
By default, ERPNext only considers Material Requests of types:
'Purchase', 'Manufacture', 'Customer Provided', and 'Material Transfer'
for updating the `requested_qty` in the `tabBin` table.
Since we use custom scheduler logic to generate Material Requests of type
'Repack' and 'Production', they were not being reflected in the projected
quantity calculations. This caused the system to keep triggering new
Material Requests even when valid ones already existed.

📅 Date of Change:
2025-04-16

 
====
3,
====

📁 File Modified:
Path: frappe-bench/apps/erpnext/erpnext/stock/doctype/material_request/material_request.py

🔧 Function Modified:
def validate(self):

🛠️ Change Summary:
Added support for 4 new custom workflow statuses (Repacked, Produced, Partially Repacked, Partially Produced) to the allowed status validation inside the validate() method.


# 🔁 Before:
validate_status(self.status, ["Draft", "Submitted", "Stopped", "Cancelled", "Pending", "Partially Ordered", "Ordered", "Issued", "Transferred", "Received", "Manufactured"])

# ✅ After:
validate_status(self.status, [
    "Draft", "Submitted", "Stopped", "Cancelled", "Pending",
    "Partially Ordered", "Ordered", "Issued", "Transferred", "Received",
    "Repacked", "Produced", "Partially Repacked", "Partially Produced"
])

🧠 Reason:
ERPNext by default validates only predefined statuses for Material Requests. Since we introduced two new Material Request types (Repack, Production) with their own lifecycle statuses, we needed to allow these in the validation to prevent Invalid Status errors during save or submit.

📅 Date of Change:
2025-05-15



====
4,
====


📁 File Modified:
Path: frappe-bench/apps/erpnext/erpnext/stock/doctype/material_request/material_request.py


🔧 Function Modified:
update_completed_qty(self, mr_items=None, update_modified=True)

🛠️ Change Summary:
Included support for Repack and Production in the condition that determines which Stock Entry types should contribute to ordered_qty.

python
Copy
Edit
# 🔁 Before:
if self.material_request_type in ("Material Issue", "Material Transfer", "Customer Provided"):

# ✅ After:
if self.material_request_type in ("Material Issue", "Material Transfer", "Customer Provided", "Repack", "Production"):
This ensures Stock Entries for Repack and Production are also considered when calculating fulfillment percentages for the Material Request.

🧠 Reason:
ERPNext originally does not consider Repack and Production types when calculating per_ordered. This caused the status to remain “Pending” or “Partially Ordered” even after all to_items were fulfilled. Adding these types ensures accurate progress tracking for custom workflows.

📅 Date of Change:
2025-05-15


====
5,
====

📁 File Modified:
Path:
frappe-bench/apps/erpnext/erpnext/selling/doctype/sales_order/sales_order.py

🔧 Lines Commented:
# from erpnext.stock.doctype.packed_item.packed_item import make_packing_list
# make_packing_list(self)

🛠️ Change Summary:
🚫 Disabled automatic packing list generation by commenting out:


This prevents ERPNext from auto-generating packed items when saving a Sales Order.
